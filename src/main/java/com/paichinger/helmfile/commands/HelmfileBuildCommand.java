package com.paichinger.helmfile.commands;import java.io.ByteArrayInputStream;import java.io.File;import java.io.InputStream;import java.util.LinkedHashMap;import java.util.List;import java.util.Map;import lombok.Builder;import lombok.Singular;import org.yaml.snakeyaml.Yaml;import com.fasterxml.jackson.databind.ObjectMapper;import com.paichinger.helmfile.models.build.HelmfileBuild;@Builderpublic class HelmfileBuildCommand {	private final Configuration configuration;	private Map<String, String> stateValuesSet;	@Singular private final List<File> stateValuesFiles;	private final String environment;	private final CommandUtils utils = new CommandUtils();		public HelmfileBuildCommand(Configuration configuration, Map<String, String> stateValuesSet, List<File> stateValuesFiles, String environment) {		this.configuration = configuration;		this.stateValuesSet = stateValuesSet;		this.stateValuesFiles = stateValuesFiles;		this.environment = environment;	}		public HelmfileBuild execute() {		String helmfileTemplateCommand = String.format("%s %s %s", configuration.getHelmfileBinaryPath(), "build --log-level=ERROR", String.join(" ", generateHelmfileCommandLineParameters()));		String commandLineOutput = CommandLineRunner.run(helmfileTemplateCommand, configuration.getWorkdir());		return unmarshallHelmfileBuildOutput(commandLineOutput);	}		protected List<String> generateHelmfileCommandLineParameters() {		return utils.processBasicParameters(stateValuesSet, stateValuesFiles, environment);	}		private HelmfileBuild unmarshallHelmfileBuildOutput(String commandLineOutput) {		InputStream in = new ByteArrayInputStream(commandLineOutput.getBytes());		Yaml yaml = new Yaml();		for (Object map : yaml.loadAll(in)) {			ObjectMapper mapper = new ObjectMapper();			//noinspection rawtypes			Map build = (LinkedHashMap) map;			if (build.get("filepath").equals("helmfile.yaml")) {				return mapper.convertValue(build, HelmfileBuild.class);			}		}		return null;	}	}